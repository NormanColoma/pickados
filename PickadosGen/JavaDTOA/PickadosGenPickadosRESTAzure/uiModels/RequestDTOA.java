
package PickadosGenPickadosRESTAzure.uiModels.DTOA;

import PickadosGenPickadosRESTAzure.uiModels.DTO.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.utils.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class RequestDTOA extends DTOA
{
	// region - Members, getters and setters

	
	private RequestType type;
	public RequestType getType () { return type; }
	public void setType (RequestType type) { this.type = type; }
	
	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }
	
	private String reason;
	public String getReason () { return reason; }
	public void setReason (String reason) { this.reason = reason; }
	
	private RequestState state;
	public RequestState getState () { return state; }
	public void setState (RequestState state) { this.state = state; }
	
	private java.util.Date date;
	public java.util.Date getDate () { return date; }
	public void setDate (java.util.Date date) { this.date = date; }
	
	
	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public RequestDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			

			if (!JSONObject.NULL.equals(json.opt("Type")))
			{
				int enumRawValue = (int) json.opt("Type");
				this.type = RequestType.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
			 
				this.id = (Integer) json.opt("Id");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Reason")))
			{
			 
				this.reason = (String) json.opt("Reason");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("State")))
			{
				int enumRawValue = (int) json.opt("State");
				this.state = RequestState.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Date")))
			{
			 
			 	String stringDate = (String) json.opt("Date");
				this.date = DateUtils.stringToDateFormat(stringDate);
			 
			}
			
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			
		
		  if (this.type != null)
			json.put("Type", this.type.getRawValue());
		
		
		  if (this.id != null)
			json.put("Id", this.id.intValue());
		
		
		  if (this.reason != null)
			json.put("Reason", this.reason);
		
		
		  if (this.state != null)
			json.put("State", this.state.getRawValue());
		
		
		  if (this.date != null)
			json.put("Date", DateUtils.dateToFormatString(this.date));
		
			
			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		RequestDTO dto = new RequestDTO ();
		
		// Attributes
		
		
	dto.setType (this.getType());

	dto.setId (this.getId());

	dto.setReason (this.getReason());

	dto.setState (this.getState());

	dto.setDate (this.getDate());

		
		
		// Roles
		
		
		return dto;
	}

	// endregion
}

	