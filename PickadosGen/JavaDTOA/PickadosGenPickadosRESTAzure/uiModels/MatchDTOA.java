
package PickadosGenPickadosRESTAzure.uiModels.DTOA;

import PickadosGenPickadosRESTAzure.uiModels.DTO.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.utils.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class MatchDTOA extends DTOA
{
	// region - Members, getters and setters

	
	private java.util.Date date;
	public java.util.Date getDate () { return date; }
	public void setDate (java.util.Date date) { this.date = date; }
	
	private String stadium;
	public String getStadium () { return stadium; }
	public void setStadium (String stadium) { this.stadium = stadium; }
	
	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }
	
	
	/* Rol: Match o--> Team */
	private TeamDTOA getHomeOfEvent_home;
	public TeamDTOA getGetHomeOfEvent_home () { return getHomeOfEvent_home; }
	public void setGetHomeOfEvent_home (TeamDTOA getHomeOfEvent_home) { this.getHomeOfEvent_home = getHomeOfEvent_home; }

	/* Rol: Match o--> Team */
	private TeamDTOA getAwayOfEvent_away;
	public TeamDTOA getGetAwayOfEvent_away () { return getAwayOfEvent_away; }
	public void setGetAwayOfEvent_away (TeamDTOA getAwayOfEvent_away) { this.getAwayOfEvent_away = getAwayOfEvent_away; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public MatchDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			

			if (!JSONObject.NULL.equals(json.opt("Date")))
			{
			 
			 	String stringDate = (String) json.opt("Date");
				this.date = DateUtils.stringToDateFormat(stringDate);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Stadium")))
			{
			 
				this.stadium = (String) json.opt("Stadium");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
			 
				this.id = (Integer) json.opt("Id");
			 
			}
			

			JSONObject jsonGetHomeOfEvent_home = json.optJSONObject("GetHomeOfEvent_home");
			if (jsonGetHomeOfEvent_home != null)
			{
				TeamDTOA tmp = new TeamDTOA();
				tmp.setFromJSON(jsonGetHomeOfEvent_home);
				this.getHomeOfEvent_home = tmp;
			}


			JSONObject jsonGetAwayOfEvent_away = json.optJSONObject("GetAwayOfEvent_away");
			if (jsonGetAwayOfEvent_away != null)
			{
				TeamDTOA tmp = new TeamDTOA();
				tmp.setFromJSON(jsonGetAwayOfEvent_away);
				this.getAwayOfEvent_away = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			
		
		  if (this.date != null)
			json.put("Date", DateUtils.dateToFormatString(this.date));
		
		
		  if (this.stadium != null)
			json.put("Stadium", this.stadium);
		
		
		  if (this.id != null)
			json.put("Id", this.id.intValue());
		
			

			if (this.getHomeOfEvent_home != null)
			{
				json.put("GetHomeOfEvent_home", this.getHomeOfEvent_home.toJSON());
			}


			if (this.getAwayOfEvent_away != null)
			{
				json.put("GetAwayOfEvent_away", this.getAwayOfEvent_away.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		MatchDTO dto = new MatchDTO ();
		
		// Attributes
		
		
	dto.setDate (this.getDate());

	dto.setStadium (this.getStadium());

	dto.setId (this.getId());

		
		
		// Roles
					// TODO: from DTOA [ GetHomeOfEvent_home ] (dataType : TeamDTOA) to DTO [ Home ]
					// TODO: from DTOA [ GetAwayOfEvent_away ] (dataType : TeamDTOA) to DTO [ Away ]
		
		
		return dto;
	}

	// endregion
}

	