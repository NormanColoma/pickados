
package PickadosGenPickadosRESTAzure.uiModels.DTOA;

import PickadosGenPickadosRESTAzure.uiModels.DTO.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.utils.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class PostDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private java.util.Date created_at;
	public java.util.Date getCreated_at () { return created_at; }
	public void setCreated_at (java.util.Date created_at) { this.created_at = created_at; }
	
	private String description;
	public String getDescription () { return description; }
	public void setDescription (String description) { this.description = description; }
	
	private PickResult postResult;
	public PickResult getPostResult () { return postResult; }
	public void setPostResult (PickResult postResult) { this.postResult = postResult; }
	
	private Double stake;
	public Double getStake () { return stake; }
	public void setStake (Double stake) { this.stake = stake; }
	
	private Double totalOdd;
	public Double getTotalOdd () { return totalOdd; }
	public void setTotalOdd (Double totalOdd) { this.totalOdd = totalOdd; }
	
	
	/* Rol: Post o--> Pick */
	private ArrayList<PickDTOA> getAllPickOfPost;
	public ArrayList<PickDTOA> getGetAllPickOfPost () { return getAllPickOfPost; }
	public void setGetAllPickOfPost (ArrayList<PickDTOA> getAllPickOfPost) { this.getAllPickOfPost = getAllPickOfPost; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public PostDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Created_at")))
			{
			 
			 	String stringDate = (String) json.opt("Created_at");
				this.created_at = DateUtils.stringToDateFormat(stringDate);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Description")))
			{
			 
				this.description = (String) json.opt("Description");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("PostResult")))
			{
				int enumRawValue = (int) json.opt("PostResult");
				this.postResult = PickResult.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Stake")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("Stake"));
 				this.stake = Double.parseDouble(stringDouble);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("TotalOdd")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("TotalOdd"));
 				this.totalOdd = Double.parseDouble(stringDouble);
			 
			}
			

			JSONArray arrayGetAllPickOfPost = json.optJSONArray("GetAllPickOfPost");
			if (arrayGetAllPickOfPost != null)
			{
				this.getAllPickOfPost = new ArrayList<PickDTOA>();
				for (int i = 0; i < arrayGetAllPickOfPost.length(); ++i)
				{
					JSONObject subJson = (JSONObject) arrayGetAllPickOfPost.opt(i);
					PickDTOA tmp = new PickDTOA();
					tmp.setFromJSON(subJson);
					this.getAllPickOfPost.add(tmp);
				}
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.created_at != null)
			json.put("Created_at", DateUtils.dateToFormatString(this.created_at));
		
		
		  if (this.description != null)
			json.put("Description", this.description);
		
		
		  if (this.postResult != null)
			json.put("PostResult", this.postResult.getRawValue());
		
		
		  if (this.stake != null)
			json.put("Stake", this.stake);
		
		
		  if (this.totalOdd != null)
			json.put("TotalOdd", this.totalOdd);
		
			

			if (this.getAllPickOfPost != null)
			{
				JSONArray jsonArray = new JSONArray();
				for (int i = 0; i < this.getAllPickOfPost.size(); ++i)
				{
					jsonArray.put(this.getAllPickOfPost.get(i).toJSON());
				}
				json.put("GetAllPickOfPost", jsonArray);
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		PostDTO dto = new PostDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setCreated_at (this.getCreated_at());

	dto.setDescription (this.getDescription());

	dto.setPostResult (this.getPostResult());

	dto.setStake (this.getStake());

	dto.setTotalOdd (this.getTotalOdd());

		
		
		// Roles
					// TODO: from DTOA [ GetAllPickOfPost ] (dataType : ArrayList<PickDTOA>) to DTO [ Pick ]
		
		
		return dto;
	}

	// endregion
}

	