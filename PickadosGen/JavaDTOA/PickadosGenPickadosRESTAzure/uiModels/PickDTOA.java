
package PickadosGenPickadosRESTAzure.uiModels.DTOA;

import PickadosGenPickadosRESTAzure.uiModels.DTO.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.utils.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class PickDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private Double odd;
	public Double getOdd () { return odd; }
	public void setOdd (Double odd) { this.odd = odd; }
	
	private String description;
	public String getDescription () { return description; }
	public void setDescription (String description) { this.description = description; }
	
	private String bookie;
	public String getBookie () { return bookie; }
	public void setBookie (String bookie) { this.bookie = bookie; }
	
	private PickResult pickResult;
	public PickResult getPickResult () { return pickResult; }
	public void setPickResult (PickResult pickResult) { this.pickResult = pickResult; }
	
	
	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public PickDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Odd")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("Odd"));
 				this.odd = Double.parseDouble(stringDouble);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Description")))
			{
			 
				this.description = (String) json.opt("Description");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Bookie")))
			{
			 
				this.bookie = (String) json.opt("Bookie");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("PickResult")))
			{
				int enumRawValue = (int) json.opt("PickResult");
				this.pickResult = PickResult.fromRawValue(enumRawValue);
			 
			}
			
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.odd != null)
			json.put("Odd", this.odd);
		
		
		  if (this.description != null)
			json.put("Description", this.description);
		
		
		  if (this.bookie != null)
			json.put("Bookie", this.bookie);
		
		
		  if (this.pickResult != null)
			json.put("PickResult", this.pickResult.getRawValue());
		
			
			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		PickDTO dto = new PickDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setOdd (this.getOdd());

	dto.setDescription (this.getDescription());

	dto.setBookie (this.getBookie());

	dto.setPickResult (this.getPickResult());

		
		
		// Roles
		
		
		return dto;
	}

	// endregion
}

	