
package PickadosGenPickadosRESTAzure.uiModels.DTOA;

import PickadosGenPickadosRESTAzure.uiModels.DTO.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.utils.*;
import PickadosGenPickadosRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class TipsterStatsDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private String alias;
	public String getAlias () { return alias; }
	public void setAlias (String alias) { this.alias = alias; }
	
	private Double subscription_fee;
	public Double getSubscription_fee () { return subscription_fee; }
	public void setSubscription_fee (Double subscription_fee) { this.subscription_fee = subscription_fee; }
	
	private Boolean premium;
	public Boolean getPremium () { return premium; }
	public void setPremium (Boolean premium) { this.premium = premium; }
	
	
	/* Rol: TipsterStats o--> Stats */
	private ArrayList<StatsDTOA> getStatsOfTipster;
	public ArrayList<StatsDTOA> getGetStatsOfTipster () { return getStatsOfTipster; }
	public void setGetStatsOfTipster (ArrayList<StatsDTOA> getStatsOfTipster) { this.getStatsOfTipster = getStatsOfTipster; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public TipsterStatsDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Alias")))
			{
			 
				this.alias = (String) json.opt("Alias");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Subscription_fee")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("Subscription_fee"));
 				this.subscription_fee = Double.parseDouble(stringDouble);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Premium")))
			{
			 
				this.premium = (Boolean) json.opt("Premium");
			 
			}
			

			JSONArray arrayGetStatsOfTipster = json.optJSONArray("GetStatsOfTipster");
			if (arrayGetStatsOfTipster != null)
			{
				this.getStatsOfTipster = new ArrayList<StatsDTOA>();
				for (int i = 0; i < arrayGetStatsOfTipster.length(); ++i)
				{
					JSONObject subJson = (JSONObject) arrayGetStatsOfTipster.opt(i);
					StatsDTOA tmp = new StatsDTOA();
					tmp.setFromJSON(subJson);
					this.getStatsOfTipster.add(tmp);
				}
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.alias != null)
			json.put("Alias", this.alias);
		
		
		  if (this.subscription_fee != null)
			json.put("Subscription_fee", this.subscription_fee);
		
		
		  if (this.premium != null)
			json.put("Premium", this.premium);
		
			

			if (this.getStatsOfTipster != null)
			{
				JSONArray jsonArray = new JSONArray();
				for (int i = 0; i < this.getStatsOfTipster.size(); ++i)
				{
					jsonArray.put(this.getStatsOfTipster.get(i).toJSON());
				}
				json.put("GetStatsOfTipster", jsonArray);
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		TipsterDTO dto = new TipsterDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setAlias (this.getAlias());

	dto.setSubscription_fee (this.getSubscription_fee());

	dto.setPremium (this.getPremium());

		
		
		// Roles
					// TODO: from DTOA [ GetStatsOfTipster ] (dataType : ArrayList<StatsDTOA>) to DTO [ MonthlyStats ]
		
		
		return dto;
	}

	// endregion
}

	